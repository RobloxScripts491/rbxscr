-- Load the rbimgui-2 UI library
local engine = loadstring(game:HttpGet("https://raw.githubusercontent.com/RobloxScripts490/GGHUB/refs/heads/main/A%20RBIMUGILIB"))()

-- Global variables
local desiredWalkspeed = nil
local desiredJumpPower = nil
local plr = game:GetService('Players').LocalPlayer
local runService = game:GetService('RunService')
local userInputService = game:GetService('UserInputService')
local InfiniteJumpEnabled = false
local AutoWinEnabled = false
local currentToggleKey = "RightShift" -- Default key for toggling UI
local toggleKeyLabel = nil -- To store the label for dynamic updates

-- Walkspeed and Jump Power enforcement function
local function enforceValues(humanoid)
    if not humanoid then return end
    
    while humanoid and humanoid.Parent do
        if desiredWalkspeed and humanoid.WalkSpeed ~= desiredWalkspeed then
            humanoid.WalkSpeed = desiredWalkspeed
        end
        if desiredJumpPower and humanoid.JumpPower ~= desiredJumpPower then
            humanoid.JumpPower = desiredJumpPower
        end
        runService.RenderStepped:Wait() -- Check every frame
    end
end

-- Handle character respawn
plr.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    if desiredWalkspeed or desiredJumpPower then
        coroutine.wrap(enforceValues)(humanoid)
    end
end)

-- Apply to current character
if plr.Character then
    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid and (desiredWalkspeed or desiredJumpPower) then
        coroutine.wrap(enforceValues)(humanoid)
    end
end

-- Infinite Jump using UserInputService
userInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Create a window
local window = engine.new({
    text = "Script",
    size = UDim2.new(0, 325, 0, 150),
})

-- Open the window
window.open()

-- Create a tab
local tab = window.new({
    text = "Main",
})

-- Create a folder for organizing UI elements
local folder = tab.new("folder", {
    text = "Controls",
})
folder.open()

-- Auto Win Switch
local autoWinSwitch = folder.new("switch", {
    text = "Auto Win",
})
autoWinSwitch.event:Connect(function(state)
    _G.GetWins = state
    AutoWinEnabled = state
    print("Auto Win: " .. tostring(state))
    while _G.GetWins do
        wait()
        local args = {
            "\230\142\137\232\144\189\231\137\169Center",
            "247"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
    end
end)

-- Infinite Jump Switch
local infJumpSwitch = folder.new("switch", {
    text = "Inf Jump",
})
infJumpSwitch.event:Connect(function(state)
    InfiniteJumpEnabled = state
    print("Inf Jump: " .. tostring(state))
end)

-- Walkspeed Slider
local walkspeedSlider = folder.new("slider", {
    text = "Walkspeed",
    min = 16,
    max = 100,
    value = 16,
    rounding = 1,
})
walkspeedSlider.event:Connect(function(value)
    local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
    
    if not humanoid then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error",
            Text = "Character or Humanoid not found!",
            Button1 = "Ok",
            Duration = 5
        })
        return
    end
    
    if value == 0 then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error",
            Text = "Walkspeed cannot be 0!",
            Button1 = "Ok",
            Duration = 5
        })
        desiredWalkspeed = nil
        return
    end
    
    desiredWalkspeed = value
    humanoid.WalkSpeed = value
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Success",
        Text = "Walkspeed set to " .. value,
        Button1 = "Ok",
        Duration = 5
    })
    
    coroutine.wrap(enforceValues)(humanoid)
end)

-- Jump Power Slider
local jumpPowerSlider = folder.new("slider", {
    text = "Jump Power",
    min = 50,
    max = 200,
    value = 50,
    rounding = 1,
})
jumpPowerSlider.event:Connect(function(value)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "NOTE!",
        Text = "If it doesn't work, enable Inf Jump",
        Button1 = "Ok",
        Duration = 5
    })
    local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
    
    if not humanoid then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error",
            Text = "Character or Humanoid not found!",
            Button1 = "Ok",
            Duration = 5
        })
        return
    end
    
    if value == 0 then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Error",
            Text = "Jump Power cannot be 0!",
            Button1 = "Ok",
            Duration = 5
        })
        desiredJumpPower = nil
        return
    end
    
    desiredJumpPower = value
    humanoid.JumpPower = value
    
    coroutine.wrap(enforceValues)(humanoid)
end)

-- Links Dropdown
local linksDropdown = folder.new("dropdown", {
    text = "Links",
})
linksDropdown.new("Youtube Channel")
linksDropdown.event:Connect(function(name)
    setclipboard("https://www.youtube.com/@BarisScripts1")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Link has been copied!",
        Text = "Paste it to your browser.",
        Button1 = "Ok",
        Duration = 30
    })
end)

-- Labels
folder.new("label", {
    text = "Created by Baris",
    color = Color3.fromRGB(1, 1, 1),
})
toggleKeyLabel = folder.new("label", {
    text = "Press " .. currentToggleKey .. " to toggle UI",
    color = Color3.fromRGB(0, 1, 0),
})

-- Keybind to set Toggle UI key
local keybind = folder.new("keybind", {
    text = "Set Toggle UI Key",
    key = Enum.KeyCode.RightShift,
})
keybind.event:Connect(function(key)
    currentToggleKey = tostring(key):match("Enum%.KeyCode%.(.+)") or tostring(key)
    toggleKeyLabel.set("Press " .. currentToggleKey .. " to toggle UI") -- Update label
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Success",
        Text = "Toggle UI key set to " .. currentToggleKey,
        Button1 = "Ok",
        Duration = 5
    })
end)

-- Keybind to toggle UI (handled via InputBegan for custom key)
userInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode[currentToggleKey] then
        window.toggle() -- Toggle the UI
    end
end)
