-- Load the uwuware library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/RobloxScripts490/GGHUB/refs/heads/main/A%20UWUWARELIB", true))()

-- Global variables
local desiredWalkspeed = nil
local desiredJumpPower = nil
local plr = game:GetService('Players').LocalPlayer
local runService = game:GetService('RunService')
local userInputService = game:GetService('UserInputService')
local InfiniteJumpEnabled = false
local AutoWinEnabled = false

-- Walkspeed and Jump Power enforcement function
local function enforceValues(humanoid)
    if not humanoid then return end
    
    while humanoid and humanoid.Parent do
        if desiredWalkspeed and humanoid.WalkSpeed ~= desiredWalkspeed then
            humanoid.WalkSpeed = desiredWalkspeed
        end
        if desiredJumpPower and humanoid.JumpPower ~= desiredJumpPower then
            humanoid.JumpPower = desiredJumpPower
        end
        runService.RenderStepped:Wait() -- Check every frame
    end
end

-- Handle character respawn
plr.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    if desiredWalkspeed or desiredJumpPower then
        coroutine.wrap(enforceValues)(humanoid)
    end
end)

-- Apply to current character
if plr.Character then
    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid and (desiredWalkspeed or desiredJumpPower) then
        coroutine.wrap(enforceValues)(humanoid)
    end
end

-- Infinite Jump using UserInputService
userInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Create a window using uwuware
local Window = Library:CreateWindow("Script")

-- Auto Win Toggle
Window:AddToggle({
    text = "Auto Win",
    flag = "auto_win",
    state = false,
    callback = function(state)
        _G.GetWins = state
        AutoWinEnabled = state
        print("Auto Win: " .. tostring(state))
        while _G.GetWins do
            wait()
            local args = {
                "\230\142\137\232\144\189\231\137\169Center",
                "247"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
            game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
            game:GetService("ReplicatedStorage"):WaitForChild("Msg"):WaitForChild("\229\144\131"):FireServer(unpack(args))
        end
    end
})

-- Infinite Jump Toggle
Window:AddToggle({
    text = "Inf Jump",
    flag = "inf_jump",
    state = false,
    callback = function(state)
        InfiniteJumpEnabled = state
        print("Inf Jump: " .. tostring(state))
    end
})

-- Walkspeed Textbox
Window:AddBox({
    text = "Walkspeed",
    flag = "walkspeed",
    value = "",
    callback = function(text)
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        
        if not humanoid then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Character or Humanoid not found!",
                Button1 = "Ok",
                Duration = 5
            })
            return
        end
        
        if text == "" then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Please enter a walkspeed value!",
                Button1 = "Ok",
                Duration = 5
            })
            desiredWalkspeed = nil
            return
        end
        
        local speed = tonumber(text)
        if not speed then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Invalid walkspeed! Enter a number.",
                Button1 = "Ok",
                Duration = 5
            })
            desiredWalkspeed = nil
            return
        end
        
        desiredWalkspeed = speed
        humanoid.WalkSpeed = speed
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Success",
            Text = "Walkspeed set to " .. speed,
            Button1 = "Ok",
            Duration = 5
        })
        
        coroutine.wrap(enforceValues)(humanoid)
    end
})

-- Jump Power Textbox
Window:AddBox({
    text = "Jump Power",
    flag = "jump_power",
    value = "",
    callback = function(text)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "NOTE!",
            Text = "If it doesn't work, enable Inf Jump",
            Button1 = "Ok",
            Duration = 5
        })
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        
        if not humanoid then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Character or Humanoid not found!",
                Button1 = "Ok",
                Duration = 5
            })
            return
        end
        
        if text == "" then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Please enter a jump power value!",
                Button1 = "Ok",
                Duration = 5
            })
            desiredJumpPower = nil
            return
        end
        
        local power = tonumber(text)
        if not power then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Invalid jump power! Enter a number.",
                Button1 = "Ok",
                Duration = 5
            })
            desiredJumpPower = nil
            return
        end
        
        desiredJumpPower = power
        humanoid.JumpPower = power
        
        coroutine.wrap(enforceValues)(humanoid)
    end
})

-- Links Dropdown
Window:AddList({
    text = "Links",
    flag = "links",
    value = "Youtube Channel",
    values = {"Youtube Channel"},
    callback = function()
        setclipboard("https://www.youtube.com/@BarisScripts1")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Link has been copied!",
            Text = "Paste it to your browser.",
            Button1 = "Ok",
            Duration = 30
        })
    end
})

-- Destroy UI Button
Window:AddButton({
    text = "Destroy UI",
    flag = "destroy_ui",
    callback = function()
        local StarterGui = game:GetService("StarterGui")
        local BindableFunction = Instance.new("BindableFunction")
        
        function BindableFunction.OnInvoke(answer)
            if answer == "Yes" then
                Library:Close() -- Use uwuware's destroy method if available, otherwise remove UI
            end
        end
        
        StarterGui:SetCore("SendNotification", {
            Title = "Are You Sure To Exit?",
            Text = "Make Sure To Closed All Toggles!",
            Duration = 999,
            Button1 = "Yes",
            Button2 = "No",
            Callback = BindableFunction
        })
    end
})

-- Labels
Window:AddLabel({text = "Created by Baris"})
Window:AddLabel({text = "Press RightShift to hide GUI"})

-- Keybind to toggle UI
Window:AddBind({
    text = "Toggle UI",
    flag = "toggle_ui",
    key = "RightShift",
    callback = function()
        Library:Close()
    end
})

-- Initialize the library
Library:Init()
