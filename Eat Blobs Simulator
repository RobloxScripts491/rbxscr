local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/RobloxScripts490/GGHUB/refs/heads/main/AAAAAAA%20TLIB"))()

local window = library:Window("Eat Blobs Simulator")

-- Global variables
local desiredWalkspeed = nil
local desiredJumpPower = nil
local plr = game:GetService('Players').LocalPlayer
local runService = game:GetService('RunService')
local userInputService = game:GetService('UserInputService')
local InfiniteJumpEnabled = false
local AutoWinEnabled = false
local superloop = false
local normalloop = false
local spinloop = false

-- Walkspeed and Jump Power enforcement function
local function enforceValues(humanoid)
    if not humanoid then return end
    
    while humanoid and humanoid.Parent do
        if desiredWalkspeed and humanoid.WalkSpeed ~= desiredWalkspeed then
            humanoid.WalkSpeed = desiredWalkspeed
        end
        if desiredJumpPower and humanoid.JumpPower ~= desiredJumpPower then
            humanoid.JumpPower = desiredJumpPower
        end
        runService.RenderStepped:Wait()
    end
end

-- Handle character reset
plr.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    if desiredWalkspeed or desiredJumpPower then
        coroutine.wrap(enforceValues)(humanoid)
    end
end)

-- Apply to current character
if plr.Character then
    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid and (desiredWalkspeed or desiredJumpPower) then
        coroutine.wrap(enforceValues)(humanoid)
    end
end

-- Infinite Jump
userInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)




-- Walkspeed Box
window:Box("Walkspeed", function(text, focuslost)
    if focuslost then
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        
        if not humanoid then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Character or Humanoid not found!",
                Button1 = "Ok",
                Duration = 5
            })
            return
        end
        
        if text == "" then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Please enter a walkspeed value!",
                Button1 = "Ok",
                Duration = 5
            })
            desiredWalkspeed = nil
            return
        end
        
        local speed = tonumber(text)
        if not speed then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Invalid walkspeed! Enter a number.",
                Button1 = "Ok",
                Duration = 5
            })
            desiredWalkspeed = nil
            return
        end
        
        desiredWalkspeed = speed
        humanoid.WalkSpeed = speed
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Success",
            Text = "Walkspeed set to " .. speed,
            Button1 = "Ok",
            Duration = 5
        })
        
        coroutine.wrap(enforceValues)(humanoid)
    end
end)

-- Jump Power Box
window:Box("Jump Power", function(text, focuslost)
    if focuslost then
    
        local humanoid = plr.Character and plr.Character:FindFirstChildOfClass('Humanoid')
        
        if not humanoid then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Character or Humanoid not found!",
                Button1 = "Ok",
                Duration = 5
            })
            return
        end
        
        if text == "" then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Please enter a jump power value!",
                Button1 = "Ok",
                Duration = 5
            })
            desiredJumpPower = nil
            return
        end
        
        local power = tonumber(text)
        if not power then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Invalid jump power! Enter a number.",
                Button1 = "Ok",
                Duration = 5
            })
            desiredJumpPower = nil
            return
        end
        
        desiredJumpPower = power
        humanoid.JumpPower = power
        
        coroutine.wrap(enforceValues)(humanoid)
    end
end)

-- Infinite Jump Toggle
window:Toggle("Inf Jump", false, function(bool)
    InfiniteJumpEnabled = bool
    print("Inf Jump: " .. tostring(bool))
end)

-- Super Present Toggle
window:Toggle("Super Present -Size", false, function(value)
    superloop = value
    while superloop do
        local args = {
            [1] = "SuperPresent"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GiftService"):WaitForChild("RF"):WaitForChild("GetPresent"):InvokeServer(unpack(args))
        task.wait(0.005)
    end
end)

-- Normal Present Toggle
window:Toggle("Normal Present -Spin", false, function(value)
    normalloop = value
    while normalloop do
        local args = {
            [1] = "Present"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GiftService"):WaitForChild("RF"):WaitForChild("GetPresent"):InvokeServer(unpack(args))
        task.wait(0.005)
    end
end)

-- Spin Toggle
window:Toggle("Spin", false, function(value)
    spinloop = value
    while spinloop do
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.5.1"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("SpinService"):WaitForChild("RE"):WaitForChild("FreeSpinButtonPressed"):FireServer()
        task.wait(0.05)
    end
end)

-- Get All Event Orbs Button
window:Button("Get All Event Orbs", function()
    local orb = workspace.EventPoints:FindFirstChild("EventOrb")
    if orb then
        firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, orb, 0)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Success",
            Text = "Collected event orb!",
            Button1 = "Ok",
            Duration = 5
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Event",
            Text = "There are no event orbs",
            Button1 = "Ok",
            Duration = 5
        })
    end
end)

-- Dropdown for Links
local dropdown = window:Dropdown("Links", {"Youtube Channel"}, function(name)
    setclipboard("https://www.youtube.com/@BarisScripts1")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Link has been copied!",
        Text = "Paste it to your browser.",
        Button1 = "Ok",
        Duration = 30
    })
end)

-- Destroy UI Button
window:Button("Destroy UI", function()
    local StarterGui = game:GetService("StarterGui")
    local BindableFunction = Instance.new("BindableFunction")

    function BindableFunction.OnInvoke(answer)
        if answer == "Yes" then
            window:Destroy()
        elseif answer == "No" then
            -- Do nothing
        end
    end

    StarterGui:SetCore("SendNotification", {
        Title = "Are You Sure To Exit?",
        Text = "Make Sure To Closed All Toggles!",
        Duration = 999,
        Button1 = "Yes",
        Button2 = "No",
        Callback = BindableFunction
    })
end)

-- Keybind and Labels
library:Keybind("P")
window:Label("Created by Baris", true)
window:Label("Press P to hide GUI.", true)
